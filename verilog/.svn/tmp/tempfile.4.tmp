/////////////////////////////////////////////////////////////////////////
//                                                                     //
//   Modulename :  pipeline.v                                          //
//                                                                     //
//  Description :  Top-level module of the verisimple pipeline;        //
//                 This instantiates and connects the 5 stages of the  //
//                 Verisimple pipeline.                                //
//                                                                     //
//                                                                     //
/////////////////////////////////////////////////////////////////////////

`timescale 1ns/100ps

module pipeline (// Inputs
                 clock,
                 reset,
                 mem2proc_response,
                 mem2proc_data,
                 mem2proc_tag,
                 
                 cachemem_data,
                 cachemem_valid,

                 // Outputs
                 proc2mem_command,
                 proc2mem_addr,
                 proc2mem_data,

                 Icache_rd_idx,
                 Icache_rd_tag,
                 Icache_wr_idx,
                 Icache_wr_tag,
                 Icache_wr_en,

                 pipeline_completed_insts,
                 pipeline_error_status,
                 pipeline_commit_wr_data,
                 pipeline_commit_wr_idx,
                 pipeline_commit_wr_en,
                 pipeline_commit_NPC,


                 // testing hooks (these must be exported so we can test
                 // the synthesized version) data is tested by looking at
                 // the final values in memory
                 if_NPC_out,
                 if_IR_out,
                 if_valid_inst_out,
                 if_id_NPC,
                 if_id_IR,
                 if_id_valid_inst,
                 id_ex_NPC,
                 id_ex_IR,
                 id_ex_valid_inst,
                 ex_mem_NPC,
                 ex_mem_IR,
                 ex_mem_valid_inst,
                 mem_wb_NPC,
                 mem_wb_IR,
                 mem_wb_valid_inst
                );

  input         clock;             // System clock
  input         reset;             // System reset
  input  [3:0]  mem2proc_response; // Tag from memory about current request
  input  [63:0] mem2proc_data;     // Data coming back from memory
  input  [3:0]  mem2proc_tag;      // Tag from memory about current reply

  input  [63:0] cachemem_data;
  input		cachemem_valid;

  output [1:0]  proc2mem_command;  // command sent to memory
  output [63:0] proc2mem_addr;     // Address sent to memory
  output [63:0] proc2mem_data;     // Data sent to memory

  output  [6:0] Icache_rd_idx;
  output [21:0] Icache_rd_tag;
  output  [6:0] Icache_wr_idx;
  output [21:0] Icache_wr_tag;
  output	Icache_wr_en;

  output [3:0]  pipeline_completed_insts;
  output [3:0]  pipeline_error_status;
  output [4:0]  pipeline_commit_wr_idx;
  output [63:0] pipeline_commit_wr_data;
  output        pipeline_commit_wr_en;
  output [63:0] pipeline_commit_NPC;

  output [63:0] if_NPC_out;
  output [31:0] if_IR_out;
  output        if_valid_inst_out;
  output [63:0] if_id_NPC;
  output [31:0] if_id_IR;
  output        if_id_valid_inst;
  output [63:0] id_ex_NPC;
  output [31:0] id_ex_IR;
  output        id_ex_valid_inst;
  output [63:0] ex_mem_NPC;
  output [31:0] ex_mem_IR;
  output        ex_mem_valid_inst;
  output [63:0] mem_wb_NPC;
  output [31:0] mem_wb_IR;
  output        mem_wb_valid_inst;

  // Pipeline register enables
  wire   if_id_enable, id_ex_enable, ex_mem_enable, mem_wb_enable;

  // Outputs from IF-Stage
  wire [63:0] proc2Imem_addr1_out;
  wire [63:0] if_NPC1_out;
  wire [31:0] if_IR1_out;
  wire        if_valid_inst1_out;    // when low, instruction is garbage

  wire [63:0] proc2Imem_addr2_out;
  wire [63:0] if_NPC2_out;
  wire [31:0] if_IR2_out;
  wire        if_valid_inst2_out;    // when low, instruction is garbage

  // Outputs from IF/ID Pipeline Register
  reg  [63:0] if_id_NPC1;
  reg  [31:0] if_id_IR1;
  reg         if_id_valid_inst1;

  reg  [63:0] if_id_NPC2;
  reg  [31:0] if_id_IR2;
  reg         if_id_valid_inst2;
   
  // Outputs from ID stage
  wire  [1:0] id_opa_select1_out;    // ALU opa mux select (ALU_OPA_xxx *)
  wire  [1:0] id_opb_select1_out;    // ALU opb mux select (ALU_OPB_xxx *)
  wire  [4:0] id_dest_reg_idx1_out;  // destination (writeback) register index
                                     // (ZERO_REG if no writeback)
  wire  [4:0] id_alu_func1_out;      // ALU function select (ALU_xxx *)
  wire        id_rd_mem1_out;        // does inst read memory?
  wire        id_wr_mem1_out;        // does inst write memory?
  wire        id_cond_branch1_out;   // is inst a conditional branch?
  wire        id_uncond_branch1_out; // is inst an unconditional branch 
                                     // or jump?
  wire        id_halt1_out;
  wire        id_illegal1_out;
  wire        id_valid_inst1_out;    // is inst a valid instruction to be 
                                     // counted for CPI calculations?
  wire  [1:0] id_opa_select2_out;    // ALU opa mux select (ALU_OPA_xxx *)
  wire  [1:0] id_opb_select2_out;    // ALU opb mux select (ALU_OPB_xxx *)
  wire  [4:0] id_dest_reg_idx2_out;  // destination (writeback) register index
                                     // (ZERO_REG if no writeback)
  wire  [4:0] id_alu_func2_out;      // ALU function select (ALU_xxx *)
  wire        id_rd_mem2_out;        // does inst read memory?
  wire        id_wr_mem2_out;        // does inst write memory?
  wire        id_cond_branch2_out;   // is inst a conditional branch?
  wire        id_uncond_branch2_out; // is inst an unconditional branch 
                                     // or jump?
  wire        id_halt2_out;
  wire        id_illegal2_out;
  wire        id_valid_inst2_out;

  // Outputs from ID/RI Pipeline Register
  reg  [63:0] id_ri_NPC1;
  reg  [31:0] id_ri_IR1;
  reg         id_ri_valid_inst1;

  reg  [63:0] id_ri_NPC2;
  reg  [31:0] id_ri_IR2;
  reg         id_ri_valid_inst2;

  reg   [1:0] id_ri_opa_select1;
  reg   [1:0] id_ri_opb_select1;  
  reg   [4:0] id_ri_dest_reg_idx1;
                                 
  reg   [4:0] id_ri_alu_func1;   
  reg         id_ri_rd_mem1;   
  reg         id_ri_wr_mem1;      
  reg         id_ri_cond_branch1;
  reg         id_ri_uncond_branch1;
                                    
  reg         id_ri_halt1;
  reg         id_ri_illegal1;
  reg         id_ri_valid_inst1;   
                                     
  reg   [1:0] id_ri_opa_select2;   
  reg   [1:0] id_ri_opb_select2;   
  reg   [4:0] id_ri_dest_reg_idx2;  
                                     
  reg   [4:0] id_ri_alu_func2;      
  reg         id_ri_rd_mem2;        
  reg         id_ri_wr_mem2;        
  reg         id_ri_cond_branch2;   
  reg         id_ri_uncond_branch2; 

  reg         id_ri_halt2;
  reg         id_ri_illegal2;
  reg         id_ri_valid_inst2;

  // Outputs from RI stage
  wire  [6:0] ri_dest_PRN1_out;
  wire [63:0] ri_opa1_out;
  wire  [6:0] ri_PRNa1_out;
  wire        ri_opa1_valid;
  wire [63:0] ri_opb1_out;
  wire  [6:0] ri_PRNb1_out;
  wire        ri_opb1_valid; 

  wire  [6:0] ri_dest_PRN2_out;
  wire [63:0] ri_opa2_out;
  wire  [6:0] ri_PRNa2_out;
  wire        ri_opa2_valid;
  wire [63:0] ri_opb2_out;
  wire  [6:0] ri_PRNb2_out;
  wire        ri_opb2_valid;

  // Outputs from RI/OOC pipeline registers
  reg  [63:0] ri_ooc_NPC1;
  reg  [31:0] ri_ooc_IR1;
  reg         ri_ooc_valid_inst1;

  reg  [63:0] ri_ooc_NPC2;
  reg  [31:0] ri_ooc_IR2;
  reg         ri_ooc_valid_inst2;

  reg   [1:0] ri_ooc_opa_select1;
  reg   [1:0] ri_ooc_opb_select1;                                 
  reg   [4:0] ri_ooc_alu_func1;   
  reg         ri_ooc_rd_mem1;   
  reg         ri_ooc_wr_mem1;      
  reg         ri_ooc_cond_branch1;
  reg         ri_ooc_uncond_branch1;                                    
  reg         ri_ooc_halt1;
  reg         ri_ooc_illegal1;

  reg   [6:0] ri_ooc_dest_PRN1;
  reg  [63:0] ri_ooc_opa1;
  reg   [6:0] ri_ooc_PRNa1;
  reg         ri_ooc_opa1_valid;
  reg  [63:0] ri_ooc_opb1;
  reg   [6:0] ri_ooc_PRNb1;
  reg         ri_ooc_opb1_valid; 

  reg   [1:0] ri_ooc_opa_select2;
  reg   [1:0] ri_ooc_opb_select2;                                 
  reg   [4:0] ri_ooc_alu_func2;   
  reg         ri_ooc_rd_mem2;   
  reg         ri_ooc_wr_mem2;      
  reg         ri_ooc_cond_branch2;
  reg         ri_ooc_uncond_branch2;                                    
  reg         ri_ooc_halt2;
  reg         ri_ooc_illegal2;

  reg   [6:0] ri_ooc_dest_PRN2;
  reg  [63:0] ri_ooc_opa2;
  reg   [6:0] ri_ooc_PRNa2;
  reg         ri_ooc_opa2_valid;
  reg  [63:0] ri_ooc_opb2;
  reg   [6:0] ri_ooc_PRNb2;
  reg         ri_ooc_opb2_valid;
   

  // Memory interface/arbiter wires
  wire [63:0] proc2Dmem_addr, proc2Imem_addr;
  wire [1:0]  proc2Dmem_command, proc2Imem_command;
  wire [3:0]  Imem2proc_response, Dmem2proc_response;

  wire [63:0] Icache_data_out, proc2Icache_addr;
  wire        Icache_valid_out;

  assign pipeline_completed_insts = {3'b0, mem_wb_valid_inst};
  assign pipeline_error_status = 
    mem_wb_illegal ? `HALTED_ON_ILLEGAL
                   : mem_wb_halt ? `HALTED_ON_HALT
                                 : `NO_ERROR;

  assign pipeline_commit_wr_idx = wb_reg_wr_idx_out;
  assign pipeline_commit_wr_data = wb_reg_wr_data_out;
  assign pipeline_commit_wr_en = wb_reg_wr_en_out;
  assign pipeline_commit_NPC = mem_wb_NPC;

  assign proc2mem_command =
           (proc2Dmem_command==`BUS_NONE)?proc2Imem_command:proc2Dmem_command;
  assign proc2mem_addr =
           (proc2Dmem_command==`BUS_NONE)?proc2Imem_addr:proc2Dmem_addr;
  assign Dmem2proc_response = 
      (proc2Dmem_command==`BUS_NONE) ? 0 : mem2proc_response;
  assign Imem2proc_response =
      (proc2Dmem_command==`BUS_NONE) ? mem2proc_response : 0;


  icache icache_0(// inputs 
                  .clock(clock),
                  .reset(reset),

                  .Imem2proc_response(Imem2proc_response),
                  .Imem2proc_data(mem2proc_data),
                  .Imem2proc_tag(mem2proc_tag),

                  .proc2Icache_addr(proc2Icache_addr),
                  .cachemem_data(cachemem_data),
                  .cachemem_valid(cachemem_valid),

                   // outputs
                  .proc2Imem_command(proc2Imem_command),
                  .proc2Imem_addr(proc2Imem_addr),

                  .Icache_data_out(Icache_data_out),
                  .Icache_valid_out(Icache_valid_out),
                  .current_index(Icache_rd_idx),
                  .current_tag(Icache_rd_tag),
                  .last_index(Icache_wr_idx),
                  .last_tag(Icache_wr_tag),
                  .data_write_enable(Icache_wr_en)
                 );


  //////////////////////////////////////////////////
  //                                              //
  //                  IF-Stage                    //
  //                                              //
  //////////////////////////////////////////////////
  if_stage if_stage_0 (// Inputs
                       .clock (clock),
                       .reset (reset),

                       .Imem2proc_data_in(Icache_data_out),

                       .take_branch1_in(/*ooc_take_branch1_out*/),
                       .target_pc1_in(/*ooc_target_pc1_in*/),
                       .proc2Dmem_command1_in(/*from somewhere*/),

                       .take_branch2_in(/*ooc_take_branch2_out*/),
                       .target_pc2_in(/*ooc_target_pc2_in*/),
                       .proc2Dmem_command2_in(/*from somewhere else*/),
                    
                       // Outputs
                       .if_NPC1_out(if_NPC1_out), 
                       .if_IR1_out(if_IR1_out),
                       .if_valid_inst1_out(if_valid_inst1_out),

                       .if_NPC2_out(if_NPC2_out), 
                       .if_IR2_out(if_IR2_out),
                       .if_valid_inst2_out(if_valid_inst2_out),

                       .proc2Imem_addr(proc2Icache_addr)
                      );


  //////////////////////////////////////////////////
  //                                              //
  //            IF/ID Pipeline Register           //
  //                                              //
  //////////////////////////////////////////////////
  assign if_id_enable = 1'b1; // always enabled
  always @(posedge clock)
  begin
    if(reset)
    begin
      if_id_NPC1        <= `SD 0;
      if_id_IR1         <= `SD `NOOP_INST;
      if_id_valid_inst1 <= `SD `FALSE;

      if_id_NPC2        <= `SD 0;
      if_id_IR2         <= `SD `NOOP_INST;
      if_id_valid_inst2 <= `SD `FALSE;
    end // if (reset)
    else if (if_id_enable)
      begin
        if_id_NPC1        <= `SD if_NPC1_out;
        if_id_IR1         <= `SD if_IR1_out;
        if_id_valid_inst1 <= `SD if_valid_inst1_out;

        if_id_NPC2        <= `SD if_NPC2_out;
        if_id_IR2         <= `SD if_IR2_out;
        if_id_valid_inst2 <= `SD if_valid_inst2_out;
      end // if (if_id_enable)
  end // always

   
  //////////////////////////////////////////////////
  //                                              //
  //                  ID-Stage                    //
  //                                              //
  //////////////////////////////////////////////////
  id_stage id_stage_0 (// Inputs
                       .clock(clock),
                       .reset(reset),

                       .if_id_IR1(if_id_IR1),
                       .if_id_valid_inst1(if_id_valid_inst1),

                       .if_id_IR2(if_id_IR2),
                       .if_id_valid_inst2(if_id_valid_inst2),

                       // Outputs
                       .id_opa_select1_out(id_opa_select1_out),
                       .id_opb_select1_out(id_opb_select1_out),
                       .id_dest_reg_idx1_out(id_dest_reg_idx1_out),
                       .id_alu_func1_out(id_alu_func1_out),
                       .id_rd_mem1_out(id_rd_mem1_out),
                       .id_wr_mem1_out(id_wr_mem1_out),
                       .id_cond_branch1_out(id_cond_branch1_out),
                       .id_uncond_branch1_out(id_uncond_branch1_out),
                       .id_halt1_out(id_halt1_out),
                       .id_illegal1_out(id_illegal1_out),
                       .id_valid_inst1_out(id_valid_inst1_out),

                       .id_opa_select2_out(id_opa_select2_out),
                       .id_opb_select2_out(id_opb_select2_out),
                       .id_dest_reg_idx2_out(id_dest_reg_idx2_out),
                       .id_alu_func2_out(id_alu_func2_out),
                       .id_rd_mem2_out(id_rd_mem2_out),
                       .id_wr_mem2_out(id_wr_mem2_out),
                       .id_cond_branch2_out(id_cond_branch2_out),
                       .id_uncond_branch2_out(id_uncond_branch2_out),
                       .id_halt2_out(id_halt2_out),
                       .id_illegal2_out(id_illegal2_out),
                       .id_valid_inst2_out(id_valid_inst2_out),
                      );


  //////////////////////////////////////////////////
  //                                              //
  //            ID/RI Pipeline Register           //
  //                                              //
  //////////////////////////////////////////////////
  assign id_ri_enable = 1'b1; // always enabled
  always @(posedge clock)
  begin
    if (reset)
    begin
      id_ri_NPC1           <= `SD 0;
      id_ri_IR1            <= `SD `NOOP_INST;
      id_ri_valid_inst1    <= `SD FALSE;

      id_ri_NPC2           <= `SD 0;
      id_ri_IR2            <= `SD `NOOP_INST;
      id_ri_valid_inst2    <= `SD FALSE;

      id_ri_opa_select1    <= `SD 0;
      id_ri_opb_select1    <= `SD 0;
      id_ri_dest_reg_idx1  <= `SD `ZERO_REG;
      id_ri_alu_func1      <= `SD 0;
      id_ri_rd_mem1        <= `SD 0;
      id_ri_wr_mem1        <= `SD 0;
      id_ri_cond_branch1   <= `SD 0;
      id_ri_uncond_branch1 <= `SD 0;
      id_ri_halt1          <= `SD 0;
      id_ri_illegal1       <= `SD 0;
      id_ri_valid_inst1    <= `SD 0;

      id_ri_opa_select2    <= `SD 0;
      id_ri_opb_select2    <= `SD 0;
      id_ri_dest_reg_idx2  <= `SD `ZERO_REG;
      id_ri_alu_func2      <= `SD 0;
      id_ri_rd_mem2        <= `SD 0;
      id_ri_wr_mem2        <= `SD 0;
      id_ri_cond_branch2   <= `SD 0;
      id_ri_uncond_branch2 <= `SD 0;
      id_ri_halt2          <= `SD 0;
      id_ri_illegal2       <= `SD 0;
      id_ri_valid_inst2    <= `SD 0;
    end // if (reset)
    else
    begin
      if (id_ri_enable)
      begin
      id_ri_NPC1           <= `SD if_id_NPC1;
      id_ri_IR1            <= `SD if_id_IR1;

      id_ri_NPC2           <= `SD if_id_NPC2;
      id_ri_IR2            <= `SD if_id_IR2s;

      id_ri_opa_select1    <= `SD id_opa_select1_out;
      id_ri_opb_select1    <= `SD id_opb_select1_out;
      id_ri_dest_reg_idx1  <= `SD id_dest_reg_idx1_out;
      id_ri_alu_func1      <= `SD id_alu_func1_out;
      id_ri_rd_mem1        <= `SD id_rd_mem1_out;
      id_ri_wr_mem1        <= `SD id_wr_mem1_out;
      id_ri_cond_branch1   <= `SD id_cond_branch1_out;
      id_ri_uncond_branch1 <= `SD id_uncond_branch1_out;
      id_ri_halt1          <= `SD id_halt1_out;
      id_ri_illegal1       <= `SD id_illegal1_out;
      id_ri_valid_inst1    <= `SD id_valid_inst1_out;

      id_ri_opa_select2    <= `SD id_opa_select2_out;
      id_ri_opb_select2    <= `SD id_opb_select2_out;
      id_ri_dest_reg_idx2  <= `SD id_dest_reg_idx2_out;
      id_ri_alu_func2      <= `SD id_alu_func2_out;
      id_ri_rd_mem2        <= `SD id_rd_mem2_out;
      id_ri_wr_mem2        <= `SD id_wr_mem2_out;
      id_ri_cond_branch2   <= `SD id_cond_branch2_out;
      id_ri_uncond_branch2 <= `SD id_uncond_branch2_out;
      id_ri_halt2          <= `SD id_halt2_out;
      id_ri_illegal2       <= `SD id_illegal2_out;
      id_ri_valid_inst2    <= `SD id_valid_inst2_out;
      end // if
    end // else: !if(reset)
  end // always


  //////////////////////////////////////////////////
  //                                              //
  //                  RI-Stage                    //
  //                                              //
  //////////////////////////////////////////////////
  rename_issue rename_issue_0(
                       //inputs
                       .clock(clock),
                       .reset(reset),

                       .id_rename_IR1(id_ri_IR1),
                       .id_rename_IR2(id_ri_IR2),
                       .rename_dest_reg_idx_in1(id_ri_dest_reg_idx1),
                       .rename_dest_reg_idx_in2(id_ri_dest_reg_idx2),
                       .rename_valid_IR1(id_ri_valid_inst1),
                       .rename_valid_IR2(id_ri_valid_inst2),

                       .//commit inputs to update PRF Valid Bit(s) for the free register(s), RRAT and Both Free Lists
                       .ROB_to_RRAT_PRN1_in(/*from somwhere*/),
                       .ROB_to_RRAT_ARN1_in(/*from somwhere*/),
                       .ROB_to_PRF_PRN_old1_in(/*from somwhere*/),
                       .ROB_to_RRAT_PRN2_in(/*from somwhere*/),
                       .ROB_to_RRAT_ARN2_in(/*from somwhere*/),
                       .ROB_to_PRF_PRN_old2_in(/*from somwhere*/),
                       .ROB_valid1_in(/*from somwhere*/),
                       .ROB_valid2_in(/*from somwhere*/),

                       // ships passing in the night + executed instruction to update PRF      
                       .rename_cdb1_in(/*from somwhere*/),
                       .rename_cdb1_tag(/*from somwhere*/),
                       .rename_cdb1_valid(/*from somwhere*/),
                       .rename_cdb2_in(/*from somwhere*/),
                       .rename_cdb2_tag(/*from somwhere*/),
                       .rename_cdb2_valid(/*from somwhere*/),

                       // if branch misprediction
                       .copy1(/*from somwhere*/),
                       .copy2(/*from somwhere*/),

                       //outputs to Rename/Out of Order Pipeline Register for issue
                       .rename_dest_PRN1_out(rename_dest_PRN1_out),
                       .rename_opa1_out(rename_opa1_out),
                       .rename_PRNa1_out(rename_PRNa1_out),
                       .rename_opa1_valid(rename_opa1_valid),
                       .rename_opb1_out(rename_opb1_out),
                       .rename_PRNb1_out(rename_PRNb1_out),
                       .rename_opb1_valid(rename_opb1_valid), 

                       .rename_dest_PRN2_out(rename_dest_PRN2_out),
                       .rename_opa2_out(rename_opa2_out),
                       .rename_PRNa2_out(rename_PRNa2_out),
                       .rename_opa2_valid(rename_opa2_valid),
                       .rename_opb2_out(rename_opb2_out),
                       .rename_PRNb2_out(rename_PRNb2_out),
                       .rename_opb2_valid(rename_opb2_valid)
                      );


  //////////////////////////////////////////////////
  //                                              //
  //           RI/OOC Pipeline Register           //
  //                                              //
  //////////////////////////////////////////////////
  assign ri_ooc_enable = 1'b1;
  always @(posedge clock)
  begin
    if (reset)
    begin
      ri_ooc_NPC1           <= `SD 0;
      ri_ooc_IR1            <= `SD `NOOP_INST;
      ri_ooc_valid_inst1    <= `SD `FALSE;

      ri_ooc_NPC2           <= `SD 0;
      ri_ooc_IR2            <= `SD `NOOP_INST;
      ri_ooc_valid_inst2    <= `SD `FALSE;

      ri_ooc_opa_select1    <= `SD 0;
      ri_ooc_opb_select1    <= `SD 0;
      ri_ooc_alu_func1      <= `SD 0;   
      ri_ooc_rd_mem1        <= `SD 0;   
      ri_ooc_wr_mem1        <= `SD 0;
      ri_ooc_cond_branch1   <= `SD 0;
      ri_ooc_uncond_branch1 <= `SD 0;
      ri_ooc_halt1          <= `SD 0;
      ri_ooc_illegal1       <= `SD 0;

      ri_ooc_dest_PRN1_out  <= `SD 0;
      ri_ooc_opa1_out       <= `SD 0;
      ri_ooc_PRNa1_out      <= `SD 0;
      ri_ooc_opa1_valid     <= `SD 0;
      ri_ooc_opb1_out       <= `SD 0;
      ri_ooc_PRNb1_out      <= `SD 0;
      ri_ooc_opb1_valid     <= `SD 0; 

      ri_ooc_opa_select2    <= `SD 0;
      ri_ooc_opb_select2    <= `SD 0;
      ri_ooc_alu_func2      <= `SD 0;
      ri_ooc_rd_mem2        <= `SD 0;
      ri_ooc_wr_mem2        <= `SD 0;
      ri_ooc_cond_branch2   <= `SD 0;
      ri_ooc_uncond_branch2 <= `SD 0;
      ri_ooc_halt12         <= `SD 0;
      ri_ooc_illegal2       <= `SD 0;

      ri_ooc_dest_PRN2_out  <= `SD 0;
      ri_ooc_opa2_out       <= `SD 0;
      ri_ooc_PRNa2_out      <= `SD 0;
      ri_ooc_opa2_valid     <= `SD 0;
      ri_ooc_opb2_out       <= `SD 0;
      ri_ooc_PRNb2_out      <= `SD 0;
      ri_ooc_opb2_valid     <= `SD 0;
    end
    else
    begin
      if (ri_ooc_enable)
      begin
        ri_ooc_NPC1           <= `SD id_ri_NPC1;
        ri_ooc_IR1            <= `SD id_ri_IR1;
        ri_ooc_valid_inst1    <= `SD id_ri_valid_inst1;

        ri_ooc_NPC2           <= `SD id_ri_NPC2;
        ri_ooc_IR2            <= `SD id_ri_IR2;
        ri_ooc_valid_inst2    <= `SD id_ri_valid_inst2;

        ri_ooc_opa_select1    <= `SD id_ri_opa_select1;
        ri_ooc_opb_select1    <= `SD id_ri_opb_select1;
        ri_ooc_alu_func1      <= `SD id_ri_alu_func1;
        ri_ooc_rd_mem1        <= `SD id_ri_rd_mem1;
        ri_ooc_wr_mem1        <= `SD id_ri_wr_mem1;
        ri_ooc_cond_branch1   <= `SD id_ri_cond_branch1;
        ri_ooc_uncond_branch1 <= `SD id_ri_uncond_branch1;
        ri_ooc_halt1          <= `SD id_ri_halt1;
        ri_ooc_illegal1       <= `SD id_ri_illegal1;

        ri_ooc_dest_PRN1      <= `SD rename_dest_PRN1_out;
        ri_ooc_opa1           <= `SD rename_opa1_out;
        ri_ooc_PRNa1          <= `SD rename_PRNa1_out;
        ri_ooc_opa1_valid     <= `SD rename_opa1_valid;
        ri_ooc_opb1           <= `SD rename_opb1_out;
        ri_ooc_PRNb1          <= `SD rename_PRNb1_out;
        ri_ooc_opb1_valid     <= `SD rename_opb1_valid;

        ri_ooc_opa_select2    <= `SD id_ri_opa_select2;
        ri_ooc_opb_select2    <= `SD id_ri_opb_select2;
        ri_ooc_alu_func2      <= `SD id_ri_alu_func2;
        ri_ooc_rd_mem2        <= `SD id_ri_rd_mem2;
        ri_ooc_wr_mem2        <= `SD id_ri_wr_mem2;
        ri_ooc_cond_branch2   <= `SD id_ri_cond_branch2;
        ri_ooc_uncond_branch2 <= `SD id_ri_uncond_branch2;
        ri_ooc_halt2          <= `SD id_ri_halt2;
        ri_ooc_illegal2       <= `SD id_ri_illegal2;

        ri_ooc_dest_PRN2      <= `SD rename_dest_PRN2_out;
        ri_ooc_opa2           <= `SD rename_opa2_out;
        ri_ooc_PRNa2          <= `SD rename_PRNa2_out;
        ri_ooc_opa2_valid     <= `SD rename_opa2_valid;
        ri_ooc_opb2           <= `SD rename_opb2_out;
        ri_ooc_PRNb2          <= `SD rename_PRNb2_out;
        ri_ooc_opb2_valid     <= `SD rename_opb2_valid;
      end // if
    end // else: !if(reset)
  end // always



endmodule  // module vericomplicated
