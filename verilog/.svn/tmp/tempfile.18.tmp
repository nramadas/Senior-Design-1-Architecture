module ld_entry(//inputs:
           reset,
           clock,

<<<<<<< .mine
           ld_entry_load1_in,
           ld_entry_load2_in,

           ld_entry_use_enable,
=======
           ld_entry_use_mem_enable,
           ld_entry_use_cdb_enable,
>>>>>>> .r161
           ld_entry_mem_value_valid_in,

           ld_entry_cdb1_in,
           ld_entry_cdb1_tag,
           ld_entry_cdb1_valid,

           ld_entry_cdb2_in,
           ld_entry_cdb2_tag,
           ld_entry_cdb2_valid,

           ld_entry_color_commit_in,
           ld_entry_color_commit_valid,

           ld_entry_dest1_in,
           ld_entry_opa1_in,
           ld_entry_opa1_tag_in,
           ld_entry_opa1_valid,
           ld_entry_ROB1_in,
           ld_entry_rd_mem1_in,
           ld_entry_IR1_in,
           ld_entry_instr_valid1_in,
<<<<<<< .mine
           ld_entry_color1_in,
           ld_entry_no_color1_in,
=======
>>>>>>> .r161

           ld_entry_dest2_in,
           ld_entry_opa2_in,
           ld_entry_opa2_tag_in,
           ld_entry_opa2_valid,
           ld_entry_ROB2_in,
           ld_entry_rd_mem2_in,
           ld_entry_IR2_in,
           ld_entry_instr_valid2_in,
<<<<<<< .mine
           ld_entry_color2_in,
           ld_entry_no_color2_in,
=======
>>>>>>> .r161

           // output
           ld_entry_avail_out, 
           ld_entry_ready_out,

           ld_entry_dest_tag_out,
           ld_entry_address_out,
<<<<<<< .mine
           ld_entry_ROB_out
=======
           ld_entry_dest_tag_out,
           ld_entry_data_out,
           ld_entry_valid_out,
>>>>>>> .r161
          );

input          reset;
input          clock;

<<<<<<< .mine
input          ld_entry_load1_in;
input          ld_entry_load2_in;

input          ld_entry_use_enable;
=======
input          ld_entry_use_mem_enable;
input          ld_entry_use_cdb_enable;

>>>>>>> .r161
input          ld_entry_mem_value_valid_in;

input   [63:0] ld_entry_cdb1_in;
input    [6:0] ld_entry_cdb1_tag;
input          ld_entry_cdb1_valid;

input   [63:0] ld_entry_cdb2_in;
input    [6:0] ld_entry_cdb2_tag;
input          ld_entry_cdb2_valid;

input    [2:0] ld_entry_color_commit_in;
input          ld_entry_color_commit_valid;

input    [6:0] ld_entry_dest1_in;
input   [63:0] ld_entry_opa1_in;
input    [6:0] ld_entry_opa1_tag_in;
input          ld_entry_opa1_valid;
input    [5:0] ld_entry_ROB1_in;
input          ld_entry_rd_mem1_in;
input   [31:0] ld_entry_IR1_in;
input          ld_entry_instr_valid1_in;
input    [2:0] ld_entry_color1_in;
input          ld_entry_no_color1_in;

input    [6:0] ld_entry_dest2_in;
input   [63:0] ld_entry_opa2_in;
input    [6:0] ld_entry_opa2_tag_in;
input          ld_entry_opa2_valid;
input    [5:0] ld_entry_ROB2_in;
input          ld_entry_rd_mem2_in;
input   [31:0] ld_entry_IR2_in;
input          ld_entry_instr_valid2_in;
input    [2:0] ld_entry_color2_in;
input          ld_entry_no_color2_in;

output         ld_entry_avail_out;
output         ld_entry_ready_out;

output  [63:0] ld_entry_address_out;

output   [5:0] ld_entry_ROB_out;
<<<<<<< .mine
=======
output   [6:0] ld_entry_dest_tag_out;
output   [6:0] ld_entry_data_out;
output         ld_entry_valid_out;
>>>>>>> .r161

reg      [6:0] dest_tag;
reg     [63:0] opa;
reg      [6:0] opa_tag;
reg            opa_valid;
reg      [5:0] ROB_num;
reg     [31:0] IR;
reg      [2:0] color;
reg            store_complete;
reg            mem_in_process;
// valid reg

reg            in_use;

wire           LoadAFromCDB1;  // signal to load from the CDB
wire           LoadAFromCDB2;  // signal to load from the CDB

wire           next_address;

assign ld_entry_avail_out = ~in_use;
assign ld_entry_ready_out = in_use && opa_valid && store_complete;

<<<<<<< .mine
assign ld_entry_dest_tag_out = mem_in_process ? dest_tag : 64'b0;
assign ld_entry_ROB_out = mem_in_process ? ROB_num : 0;
assign ld_entry_address_out = mem_in_process ? opa + {{48{IR[15]}},IR[15:0]} : 64'b0;
=======
assign ld_entry_dest_tag_out = ld_entry_use_mem_enable ? dest_tag : 7'b0;
assign ld_entry_address_out = ld_entry_use_mem_enable ? address : 64'b0;
>>>>>>> .r161

assign ld_entry_data_out = ld_entry_use_cdb_enable ? data : 64'b0;
assign ld_entry_ROB_out = ld_entry_use_cdb_enable ? ROB_num : 6'b0;
assign ld_entry_valid_out = ld_entry_use_cdb_enable ? valid : 

//assign ld_entry_valid_out = ld_entry_use_enable ? valid : 1'b0;

// Has the tag we are waiting for shown up on the CDB 
assign LoadAFromCDB1 = (ld_entry_cdb1_tag == opa_tag) && !opa_valid && in_use && ld_entry_cdb1_valid;

assign LoadAFromCDB2 = (ld_entry_cdb2_tag == opa_tag) && !opa_valid && in_use && ld_entry_cdb2_valid;

always @(posedge clock) 
begin 
   if (reset) 
   begin 
      dest_tag <= `SD 7'b0; 
      opa <= `SD 64'b0;
      opa_tag <= `SD 7'b0; 
      opa_valid <= `SD 1'b0;
      in_use <= `SD 1'b0;
      ROB_num <= `SD 6'b0;
      valid <= `SD 1'b0;
      IR <= `SD 64'b0;
      color <= `SD 3'b0;
      store_complete <= `SD 1'b0;
      mem_in_process <= `SD 1'b0;
   end 
   else
   begin 
      if (ld_entry_load1_in && ld_entry_rd_mem1_in && ld_entry_instr_valid1_in)
      begin
         dest_tag <= `SD ld_entry_dest1_in; 
         opa <= `SD ld_entry_opa1_in;
         opa_tag <= `SD ld_entry_opa1_tag_in; 
         opa_valid <= `SD ld_entry_opa1_valid;
         IR <= `SD ld_entry_IR1_in;
         ROB_num <= `SD ld_entry_ROB1_in;
         color <= `SD ld_entry_color1_in;
         // If no color
         if(ld_entry_no_color1_in)
         begin
            store_complete <= `SD 1'b1;
         end
         // Ships passing in the night
         if(ld_entry_cdb1_tag == ld_entry_opa1_tag_in)
         begin
            opa <= `SD ld_entry_cdb1_in;
            opa_valid <= `SD 1'b1;
         end
         if(ld_entry_cdb2_tag == ld_entry_opa1_tag_in)
         begin
            opa <= `SD ld_entry_cdb1_in;
            opa_valid <= `SD 1'b1;
         end
      end
      else if (ld_entry_load2_in && ld_entry_rd_mem2_in && ld_entry_instr_valid2_in)
      begin
         dest_tag <= `SD ld_entry_dest2_in; 
         opa <= `SD ld_entry_opa2_in;
         opa_tag <= `SD ld_entry_opa2_tag_in; 
         opa_valid <= `SD ld_entry_opa2_valid;
         IR <= `SD ld_entry_IR1_in;
         ROB_num <= `SD ld_entry_ROB2_in;
         color <= `SD ld_entry_color2_in;
         // If no color
         if(ld_entry_no_color2_in)
         begin
            store_complete <= `SD 1'b1;
         end
         // Ships passing in the night
         if(ld_entry_cdb1_tag == ld_entry_opa2_tag_in)
         begin
            opa <= `SD ld_entry_cdb2_in;
            opa_valid <= `SD 1'b1;
         end
         if(ld_entry_cdb2_tag == ld_entry_opa2_tag_in)
         begin
            opa <= `SD ld_entry_cdb2_in;
            opa_valid <= `SD 1'b1;
         end
      end
      else
         if(LoadAFromCDB1)
         begin
            opa <= `SD ld_entry_cdb1_in;
            opa_valid <= `SD 1'b1;
         end
         if(LoadAFromCDB2)
         begin
            opa <= `SD ld_entry_cdb2_in;
            opa_valid <= `SD 1'b1;
         end
         if(ld_entry_color_commit_valid && (ld_entry_color_commit_in==color))
            store_complete <= `SD 1'b1;

         if(ld_entry_use_enable)
            mem_in_process <= `SD 1'b1;

         if(mem_in_process && ld_entry_mem_value_valid_in)
         begin
            in_use <= `SD 1'b0;
            mem_in_process <= `SD 1'b0;
         end
      end
   end
end // end always

endmodule
